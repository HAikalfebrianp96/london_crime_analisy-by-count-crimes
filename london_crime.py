# -*- coding: utf-8 -*-
"""london_crime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SwbVZxmd-0i6dTMDpQyEBpjbFqPtNGqS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib as mpl 
# %matplotlib inline

df = pd.read_csv("london_crime_by_lsoa.csv")
df

df.columns.values

df.index.values

df.dtypes

df_year = df[['year', 'value']]

# Group the data by year and sum the crime counts
df_year_grouped = df_year.groupby('year').sum()

# Create a line plot of the trend of crimes over years
plt.plot(df_year_grouped.index, df_year_grouped['value'])
plt.xlabel('Year')
plt.ylabel('Count of Crimes')
plt.title('Trend of Crimes per Year')

# Add a text annotation to the plot
plt.annotate('Highest Count', xy=(2011, 6900), xytext=(2012, 6400),arrowprops=dict(facecolor='red', shrink=0.05))
plt.show()

top_boroughs = df.groupby('borough')['value'].sum().sort_values(ascending=False)[:5].index.tolist()

# Filter the data for the top boroughs
df_top_boroughs = df[df['borough'].isin(top_boroughs)]

# Group the data by year and borough and sum the crime counts
df_year_borough_grouped = df_top_boroughs.groupby(['year', 'borough'])['value'].sum().unstack()

# Create an area plot for each borough
df_year_borough_grouped.plot(kind='area', stacked=True, alpha=0.25,figsize=(20,10))

# Set the title and axis labels
plt.title('Top 5 Boroughs by Total Count of Crimes over the Years')
plt.xlabel('Year')
plt.ylabel('Count of Crimes')

# Show the plot
plt.show()

df_year_month = df.groupby(['year', 'month']).sum()

# Reset the index to create separate columns for year and month
df_year_month.reset_index(inplace=True)

# Create a scatter plot of the trend of crimes over months and years
plt.scatter(df_year_month['month'], df_year_month['value'], c=df_year_month['year'], cmap='viridis')

# Set the labels and title of the plot
plt.xlabel('Month')
plt.ylabel('Count of Crimes')
plt.title('Trend of Crimes by Month and Year')

# Add a colorbar to show the mapping between color and year
cbar = plt.colorbar()
cbar.set_label('Year')

# Show the plot
plt.show()

import seaborn as sns
df_year_major_minor = df.groupby(['year', 'major_category', 'minor_category']).sum()['value']

# Unstack the data to create separate columns for each minor category within each major category
df_year_major_minor = df_year_major_minor.unstack(['major_category', 'minor_category'])

# Create a stacked bar plot of the trend of crimes over years by major and minor category
plt.figure(figsize=(16, 8))
sns.boxplot(data=df_year_major_minor, orient='h')
plt.xlabel('Count of Crimes')
plt.ylabel('Major and Minor Category')
plt.title('Trend of Crimes by Major and Minor Category and Year')

# Show the plot
plt.show()

from wordcloud import WordCloud
import folium
categories = df['major_category'].str.cat(sep=' ')
wordcloud = WordCloud(width=800, height=800, background_color='white').generate(categories)
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

df.info()

import folium
print("Crime rate in boroughs of london")
print("please zoom in to view the map")
df2=df[['borough','value']]
world_geo = r'https://raw.githubusercontent.com/radoi90/housequest-data/master/london_boroughs.geojson' 
world_map=folium.Map(location=[54.237933,-2.36967],zoom_start=5,tiles = 'OpenStreetMap')

world_map.choropleth(
    geo_data=world_geo,
    name='choropleth',
    data=df2,
    columns=['borough', 'value'],
    key_on='feature.properties.name',
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Crime rate in boroughs of london'
    
)

#folium.LayerControl().add_to(world_map)
world_map.save('LondonCrime.html')
display(world_map)